const { readdir, createReadStream, writeFile } = require("fs-extra");
const { createInterface } = require("readline");
const { join, parse } = require("path");

// This script is not part of faast.js, but rather a tool to rewrite some parts
// of the generated docs from api-generator and api-documenter so they work with
// the website generated by docusaurus.

async function main() {
    const inputFolderPath = 'api-extractor/markdown'
    const outputFolderPath = "website/docs/api";
    const mdFiles = await readdir(inputFolderPath);
    for (const mdFile of mdFiles) {
        try {
            const { name: id, ext } = parse(mdFile);
            if (ext !== ".md") {
                continue;
            }

            const mdPath = join(inputFolderPath, mdFile);
            const inputStream = createReadStream(mdPath);

            const output = [];
            const lines = createInterface({
                input: inputStream,
                crlfDelay: Infinity
            });

            let title = "";
            lines.on("line", line => {
                let skip = false;
                if (!title) {
                    const titleLine = line.match(/## (.*)/);
                    if (titleLine) {
                        title = titleLine[1];
                    }
                }
                const homeLink = line.match(/\[Home\]\(.\/index\.md\) &gt; (.*)/);
                if (homeLink) {
                    // Skip the breadcrumb for the toplevel index file.
                    if (id !== "doxygen2docusaurus") {
                        output.push(homeLink[1]);
                    }
                    skip = true;
                }
                // See issue #4. api-documenter expects \| to escape table
                // column delimiters, but docusaurus uses a markdown processor
                // that doesn't support this. Replace with an escape sequence
                // that renders |.
                if (line.startsWith("|")) {
                    line = line.replace(/\\\|/g, "&#124;");
                }
                if (!skip) {
                    output.push(line);
                }
            });

            await new Promise(resolve => lines.once("close", resolve));
            inputStream.close();

            const header = [
              "---",
              `id: ${id}`,
              `title: ${title}`,
              `hide_title: true`,
              "---",
              "",
              "<div class=\"tsdocPage\">",
              "",
            ];

            const footer = [
              "",
              "</div>"
            ];

            console.log(`Writing ${mdFile}...`);
            const docPath = join(outputFolderPath, mdFile);
            await writeFile(docPath, header.concat(output).concat(footer).join("\n"));
        } catch (err) {
            console.error(`Could not process ${mdFile}: ${err}`);
        }
    }
}

main();
