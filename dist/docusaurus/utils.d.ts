/**
 * Formats a Date object into a standardised UTC string representation.
 *
 * @remarks
 * Produces a timestamp in the format "YYYY-MM-DD HH:mm:ss +0000" using
 * UTC timezone for consistent date formatting across different environments.
 * This format ensures reproducible timestamps regardless of the local
 * system timezone, which is essential for documentation generation consistency.
 *
 * @param date - The Date object to format.
 * @returns A formatted date string in UTC with timezone offset.
 *
 * @public
 */
export declare function formatDate(date: Date): string;
/**
 * Formats a duration value into a human-readable string representation.
 *
 * @remarks
 * Converts millisecond values into appropriate units (milliseconds, seconds,
 * or minutes) with appropriate precision for display purposes. The function
 * automatically selects the most suitable unit based on the magnitude of
 * the duration value to ensure optimal readability for performance reporting.
 *
 * @param n - The duration in milliseconds.
 * @returns A formatted duration string with appropriate units.
 *
 * @public
 */
export declare function formatDuration(n: number): string;
/**
 * Removes empty lines from a text string.
 *
 * @remarks
 * Eliminates lines that contain only whitespace characters, helping to
 * clean up text content for documentation processing. This function is
 * particularly useful for normalising content extracted from XML sources
 * where formatting artefacts may introduce unwanted empty lines.
 *
 * @param text - The input text to process.
 * @returns The text with empty lines removed.
 *
 * @public
 */
export declare function removeEmptyLines(text: string): string;
/**
 * Sanitises text for use in hierarchical URL paths.
 *
 * @remarks
 * Transforms text into a URL-safe format suitable for hierarchical paths
 * by converting to lowercase, removing spaces, encoding special characters,
 * and preserving forward slashes for path structure. This function ensures
 * that generated URLs are compatible with web standards whilst maintaining
 * the hierarchical nature of documentation structures.
 *
 * @param text - The input text to sanitise.
 * @returns A URL-safe hierarchical path string.
 *
 * @public
 */
export declare function sanitizeHierarchicalPath(text: string): string;
/**
 * Sanitises anonymous namespace identifiers for better readability.
 *
 * @remarks
 * Simplifies the representation of anonymous namespaces by removing
 * redundant text whilst preserving the essential identifying information.
 * This transformation improves the readability of documentation by reducing
 * verbose namespace representations commonly generated by Doxygen.
 *
 * @param text - The namespace identifier to sanitise.
 * @returns A cleaner namespace identifier.
 *
 * @public
 */
export declare function sanitizeAnonymousNamespace(text: string): string;
/**
 * Flattens a hierarchical path by replacing separators with hyphens.
 *
 * @remarks
 * Converts forward slashes to hyphens to create a flat string suitable
 * for use in contexts where hierarchical separators are not appropriate.
 * This is particularly useful for creating file names or identifiers
 * that must not contain path separators whilst preserving readability.
 *
 * @param text - The hierarchical path to flatten.
 * @returns A flattened path string with hyphens instead of slashes.
 *
 * @public
 */
export declare function flattenPath(text: string): string;
/**
 * Removes hexadecimal anchor suffixes from reference identifiers.
 *
 * @remarks
 * Strips trailing hexadecimal anchor patterns from Doxygen reference
 * identifiers to obtain the base reference without anchor information.
 * This is essential for creating clean reference links whilst preserving
 * the ability to extract anchor information separately when needed.
 *
 * @param refid - The reference identifier to process.
 * @returns The reference identifier with hexadecimal anchor removed.
 *
 * @public
 */
export declare function stripPermalinkHexAnchor(refid: string): string;
/**
 * Removes text anchor suffixes from reference identifiers.
 *
 * @remarks
 * Strips trailing text-based anchor patterns from Doxygen reference
 * identifiers to obtain the base reference without anchor information.
 * This complements the hexadecimal anchor removal function by handling
 * text-based anchor patterns that may appear in certain Doxygen outputs.
 *
 * @param refid - The reference identifier to process.
 * @returns The reference identifier with text anchor removed.
 *
 * @public
 */
export declare function stripPermalinkTextAnchor(refid: string): string;
/**
 * Removes leading newline characters from text.
 *
 * @remarks
 * Strips newline characters from the beginning of a text string whilst
 * preserving the remainder of the content. This function is useful for
 * cleaning up text content that may have unwanted leading whitespace
 * from XML parsing or template processing operations.
 *
 * @param text - The input text to process.
 * @returns The text with leading newlines removed.
 *
 * @public
 */
export declare function stripLeadingNewLines(text: string): string;
/**
 * Removes trailing whitespace and newline characters from text.
 *
 * @remarks
 * Strips trailing spaces, carriage returns, and newlines from the end
 * of a text string whilst preserving the main content. This function
 * ensures clean text output by removing formatting artefacts that may
 * interfere with proper Markdown rendering or display.
 *
 * @param text - The input text to process.
 * @returns The text with trailing whitespace and newlines removed.
 *
 * @public
 */
export declare function stripTrailingNewLines(text: string): string;
/**
 * Removes both leading and trailing newline characters from text.
 *
 * @remarks
 * Combines the functionality of stripping both leading and trailing
 * newlines to clean up text content for processing. This comprehensive
 * cleaning function is particularly useful for normalising content
 * extracted from various sources that may have inconsistent whitespace.
 *
 * @param text - The input text to process.
 * @returns The text with leading and trailing newlines removed.
 *
 * @public
 */
export declare function stripLeadingAndTrailingNewLines(text: string): string;
/**
 * Extracts the anchor portion from a reference identifier.
 *
 * @remarks
 * Retrieves the anchor part of a Doxygen reference identifier by removing
 * the base reference portion and returning only the anchor suffix. This
 * function is essential for creating proper internal links within
 * documentation pages where anchor-based navigation is required.
 *
 * @param refid - The reference identifier to process.
 * @returns The anchor portion of the reference identifier.
 *
 * @public
 */
export declare function getPermalinkAnchor(refid: string): string;
/**
 * Checks whether a folder exists at the specified path.
 *
 * @remarks
 * Asynchronously verifies the existence of a directory at the given path
 * and confirms that it is indeed a directory rather than a file. This
 * function provides safe filesystem access with proper error handling
 * for cases where the path does not exist or is inaccessible.
 *
 * @param folderPath - The path to check for folder existence.
 * @returns A promise that resolves to true if the folder exists.
 *
 * @public
 */
export declare function folderExists(folderPath: string): Promise<boolean>;
/**
 * Joins an array of strings with different delimiters for the final item.
 *
 * @remarks
 * Concatenates array elements using a standard delimiter between most items
 * and a special delimiter before the last item, useful for creating
 * grammatically correct lists (e.g., "A, B, and C"). This function ensures
 * proper English grammar in generated text whilst handling edge cases
 * such as empty arrays and single-item arrays appropriately.
 *
 * @param arr - The array of strings to join.
 * @param delimiter - The standard delimiter between items.
 * @param lastDelimiter - The special delimiter before the last item.
 * @returns The joined string with appropriate delimiters.
 *
 * @public
 */
export declare function joinWithLast(arr: string[], delimiter: string, lastDelimiter: string): string;
/**
 * Validates whether a string represents a valid URL.
 *
 * @remarks
 * Attempts to construct a URL object from the input string to determine
 * if it represents a valid, well-formed URL. This validation method
 * leverages the native URL constructor's built-in validation capabilities
 * to provide robust URL checking without implementing custom parsing logic.
 *
 * @param str - The string to validate as a URL.
 * @returns True if the string is a valid URL, false otherwise.
 *
 * @public
 */
export declare function isUrl(str: string): boolean;
//# sourceMappingURL=utils.d.ts.map